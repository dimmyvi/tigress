{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2023-01-12T00:40:42.379632+00:00",
  "repo": "dimmyvi/tigress",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOIGmWw85aauhj",
      "title": "Consider using HPKE",
      "url": "https://github.com/dimmyvi/tigress/issues/2",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current design appears to use a simple (simplistic) scheme where the protected content is covered by an AEAD.  The secret that is exchanged appears to be a PSK.\r\n\r\nThis engages a ton of extra machinery for which it isn't necessarily clear that the design is sound.  For instance, the means of generating the AEAD key and IV appears to be left to the definition of each AEAD function that is defined, resulting in this being a little imprecise in its definition.\r\n\r\nHPKE (RFC 9180) provides a solid abstraction over message encapsulation that provides PSK-based encapsulation of content with similar properties to this, but with formal analysis to back it.  It deals with algorithm identification cleanly and other important security details, like how many bytes can safely be carried.\r\n\r\nUsing HPKE might also allow for a stronger mode of exchange that is less vulnerable to interception though the use of a KEM.  This would require an additional piece of communication or configuration so that the sender could receive the receiver's key, but it could greatly improve overall security.  Note that use of a KEM is not exclusive with the use of a PSK.",
      "createdAt": "2023-01-03T05:48:27Z",
      "updatedAt": "2023-01-03T05:48:27Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 3,
      "id": "I_kwDOIGmWw85aauq_",
      "title": "Why does the mailbox ID need to be high entropy?",
      "url": "https://github.com/dimmyvi/tigress/issues/3",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[Section 3](https://dimmyvi.github.io/tigress/draft-art-tigress.html#section-3-2) says:\r\n\r\n> A unique Mailbox Identifier is generated by the Relay server as a part of CreateMailbox call, created using a good source of entropy (preferably hardware-based entropy).\r\n\r\nWhat purpose does this serve?  Is this a capability URL?",
      "createdAt": "2023-01-03T05:49:34Z",
      "updatedAt": "2023-01-03T05:49:34Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 4,
      "id": "I_kwDOIGmWw85aau2q",
      "title": "Diagrams are too wide",
      "url": "https://github.com/dimmyvi/tigress/issues/4",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I know this is difficult, but diagrams need to be at most 72 columns.  There are a few diagrams here that are much larger than that.",
      "createdAt": "2023-01-03T05:50:31Z",
      "updatedAt": "2023-01-03T05:50:31Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 5,
      "id": "I_kwDOIGmWw85aavLl",
      "title": "Don't dictate server deployment",
      "url": "https://github.com/dimmyvi/tigress/issues/5",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft currently mandates a very particular form for URLs, like [this](https://dimmyvi.github.io/tigress/draft-art-tigress.html#section-6.1.1):\r\n\r\n> POST /{version}/m\r\n\r\n[RFC 8820](https://datatracker.ietf.org/doc/html/rfc8820) goes into more detail about how specifications should not mandate paths and other URI components too tightly as this can interfere with server deployment choices.",
      "createdAt": "2023-01-03T05:53:20Z",
      "updatedAt": "2023-01-03T05:53:20Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOIGmWw85aawqN",
      "title": "Versioning",
      "url": "https://github.com/dimmyvi/tigress/issues/6",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Putting versions in URIs is sometimes useful in deployments (see #5) but also not necessarily interoperable.  Though common practice in some parts of the industry, others have moved away from that practice.   For instance, at Mozilla, we tend to stand up a new server with a new domain name if there is any need to make changes that are not compatible (backward or forward) with an existing deployment.\r\n\r\nA method for versioning that is somewhat more common in HTTP is to use media types to describe the \"version\" of the content.  Support for media types is then negotiated using `Accept` and other content-negotiation fields, allowing clients and servers to settle on their most-preferred version without necessarily resorting to errors when new code meets old code.",
      "createdAt": "2023-01-03T06:03:55Z",
      "updatedAt": "2023-01-03T06:03:55Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 7,
      "id": "I_kwDOIGmWw85aaw9w",
      "title": "Don't use generic content types",
      "url": "https://github.com/dimmyvi/tigress/issues/7",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The content of these messages is specific to this protocol and can therefore be identified clearly as such.  \"application/json\" is not very useful to client or server.\r\n\r\nSee also #6.",
      "createdAt": "2023-01-03T06:05:16Z",
      "updatedAt": "2023-01-03T06:05:16Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOIGmWw85GW3ae",
      "title": "Convert the sequence diagrams to plantuml",
      "url": "https://github.com/dimmyvi/tigress/pull/1",
      "state": "MERGED",
      "author": "snorp",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Convert the sequence diagrams to plantuml",
      "createdAt": "2022-12-29T17:01:20Z",
      "updatedAt": "2023-01-10T19:12:26Z",
      "baseRepository": "dimmyvi/tigress",
      "baseRefName": "main",
      "baseRefOid": "f0b1d93535dfb898a8f151072d8f49f9e12e2e70",
      "headRepository": "snorp/tigress",
      "headRefName": "plantuml",
      "headRefOid": "8243bdd0ee5ef5d84921b1ae129ecf8a5bd6ca71",
      "closedAt": "2023-01-10T19:12:26Z",
      "mergedAt": "2023-01-10T19:12:26Z",
      "mergedBy": "dimmyvi",
      "mergeCommit": {
        "oid": "7c23a4a75b69492c4532f49a207fbb19ef899188"
      },
      "comments": [
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is nicer than the manual ASCII art, but not sure if it will work with the automated builds. I guess we'll see?",
          "createdAt": "2022-12-29T17:02:45Z",
          "updatedAt": "2022-12-29T17:02:45Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This also needs a change to fix up the SVG output here https://github.com/martinthomson/i-d-template/pull/357",
          "createdAt": "2022-12-29T18:13:04Z",
          "updatedAt": "2022-12-29T18:13:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "The style changes should be ready to go now.\r\n\r\nThough maybe you could also try out [aasvg](https://github.com/martinthomson/aasvg).  It probably won't handle the \"-.-.-.\" lines well though.",
          "createdAt": "2023-01-03T05:01:42Z",
          "updatedAt": "2023-01-03T05:01:42Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm working on fixing the horizontal squashing. Not really sure which part of the pipeline is causing that problem, though.",
          "createdAt": "2023-01-03T17:01:51Z",
          "updatedAt": "2023-01-03T17:01:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "xml2rfc - with its default HTML styling - generates SVG figures that are scaled to 100% of the width of the bounding box.  This results in squashing if the diagram is large (the number varies, but the default stylesheet goes up to about 900px) or stretching if the diagram is small.  The stylesheet I use only sets max-width, so it doesn't stretch, but it does so for a narrower width than the default so it will squash more aggressively if the figures are too big.\r\n\r\nLarge figures are a real problem with tools like plantuml (or mermaid, which I find integrates better, by the way).  The only suggestion I have is to look for ways to make your diagram smaller.  That will help with readability anyway.",
          "createdAt": "2023-01-04T03:11:33Z",
          "updatedAt": "2023-01-04T03:11:33Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the explanation. I saw the `max-width` in `i-d-template`, but it's not clear to me how the `viewBox` and `width` attributes are generated for the SVG. You can tell `plantuml` to omit those, but they show up in the HTML output regardless, so I guess something else is coming up with a \"natural\" dimension for the SVG somewhere? Maybe xml2rfc?\r\n\r\nI wanted to use `mermaid` initially as I've enjoyed using it for other things, but was scared off by the comment in the `kramdown-rfc` `README`: \"Very experimental; the conversion to SVG is prone to generate black-on-black text in this version\". I tried it just now and a simple sequence diagram seems to choke on invalid `font-weight` attributes in `xml2rfc`, so maybe I'm missing some additional configuration?",
          "createdAt": "2023-01-04T15:36:08Z",
          "updatedAt": "2023-01-04T15:36:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "Sorry, I don't know how `viewBox` and `width` are generated in different tools.  I can only speak to `aasvg`, which sets all of the dimension attributes.  My understanding is that `xml2rfc` doesn't touch sizing attributes, but will complain about `width` (a complaint I ignore).\r\n\r\nIt might be possible to tweak `kramdown-rfc` to filter out any offending attributes, like `font-weight` [here](https://github.com/cabo/kramdown-rfc/blob/93427e543b09bbdd651cdac90aa930eb609fe2ac/lib/kramdown-rfc2629.rb#L441-L450) if you have trouble.  `svgcheck` also has the `-r` option, which strips out anything it doesn't know about.",
          "createdAt": "2023-01-04T23:25:28Z",
          "updatedAt": "2023-01-04T23:25:28Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added some bits to install `plantuml` when running in CI (untested in CI, however). I also tried to fix the diagram to look better with the limited width.",
          "createdAt": "2023-01-06T14:49:46Z",
          "updatedAt": "2023-01-06T14:49:46Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "![Screenshot 2023-01-06 8 48 04 AM](https://user-images.githubusercontent.com/31482/211036132-39a24c81-5d5e-4247-b92e-dedf7ade2ec2.png)\r\n",
          "createdAt": "2023-01-06T14:50:39Z",
          "updatedAt": "2023-01-06T14:50:39Z"
        },
        {
          "author": "dimmyvi",
          "authorAssociation": "OWNER",
          "body": "xml2rfc fails with the new diagram: https://github.com/dimmyvi/tigress/actions/runs/3856131963/jobs/6612919761\r\nI had similar issue when I tried to insert an svg image to the doc",
          "createdAt": "2023-01-09T20:55:03Z",
          "updatedAt": "2023-01-09T20:55:03Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, it seems I screwed up the `plantuml` installation stuff, as the `lint` rule (obviously, in retrospect) does not run before the xml generation. @martinthomson , I think I need to add stuff to the `deps` target, right? Or add things to `DEPS_FILES`? The latter didn't work for me, but the former did with this PR https://github.com/martinthomson/i-d-template/pull/360",
          "createdAt": "2023-01-09T21:23:31Z",
          "updatedAt": "2023-01-09T21:23:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "I've improved documentation for adding dependencies in https://github.com/martinthomson/i-d-template/commit/52201af9fef3bb9c00a06caa16494b1854eec4d3",
          "createdAt": "2023-01-09T22:50:48Z",
          "updatedAt": "2023-01-09T22:50:48Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson sorry for being dense, but that still doesn't seem to be working for me -- latest attempt in [77cbf8875546f7c5086aac5444718521b323b797](https://github.com/dimmyvi/tigress/commit/77cbf8875546f7c5086aac5444718521b323b797)",
          "createdAt": "2023-01-10T00:11:47Z",
          "updatedAt": "2023-01-10T00:11:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "The action isn't running (maybe because @dimmyvi) hasn't approved.  So no evidence that it works (or not).\r\n\r\nHmm, that looks basically fine to me in structure. The catch is that the image that this runs within for CI runs is not the default GitHub CI image, but one that I maintain.  That uses alpine, not ubuntu.  So for CI you need `apk add --no-cache plantuml` instead of `apt-get install`.",
          "createdAt": "2023-01-10T00:21:59Z",
          "updatedAt": "2023-01-10T00:21:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "I've added a few more pointers to the documentation.",
          "createdAt": "2023-01-10T00:40:53Z",
          "updatedAt": "2023-01-10T00:40:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "@snorp, I just realized that ordering matters.  You might also find that you need to put the change to DEPS_FILES at the top of the Makefile.",
          "createdAt": "2023-01-10T01:06:11Z",
          "updatedAt": "2023-01-10T01:06:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "body": "...and I realize that you can't easily tweak the inclusion in DEPS_FILES based on `$(CI)`...  The way to address that is to change the rule as follows:\r\n\r\n```make\r\nplantuml_marker := .whatever\r\nDEPS_FILES += $(plantuml_marker)\r\nLIBDIR := lib\r\ninclude $(LIBDIR)/main.mk\r\n\r\n# boilerplate here\r\n\r\n$(plantuml_marker):\r\n        @if $(CI); then apk add --no-cache plantuml; elif ! hash plantuml >/dev/null; then ! echo \"plantuml is not installed\"; fi\r\n        @touch $@\r\n\r\n# other targets",
          "createdAt": "2023-01-10T01:11:50Z",
          "updatedAt": "2023-01-10T01:11:50Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah! Thanks, that seems to be working now with `CI=true make` locally. We'll see if the Actions are happy if @dimmyvi kicks it :)",
          "createdAt": "2023-01-10T01:16:38Z",
          "updatedAt": "2023-01-10T01:16:38Z"
        },
        {
          "author": "dimmyvi",
          "authorAssociation": "OWNER",
          "body": "Ran the action, it still fails: https://github.com/dimmyvi/tigress/actions/runs/3879254464/jobs/6629587218",
          "createdAt": "2023-01-10T17:07:22Z",
          "updatedAt": "2023-01-10T17:07:22Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@dimmyvi I pushed a plausible fix, can you kick it again?",
          "createdAt": "2023-01-10T18:01:36Z",
          "updatedAt": "2023-01-10T18:01:36Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I found a way to run it locally and it's still broken. Investigating further. Ugh.",
          "createdAt": "2023-01-10T18:14:37Z",
          "updatedAt": "2023-01-10T18:14:37Z"
        },
        {
          "author": "snorp",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Alright, seems to work locally now with the Action. Hopefully it also works on GitHub.",
          "createdAt": "2023-01-10T18:17:34Z",
          "updatedAt": "2023-01-10T18:17:34Z"
        },
        {
          "author": "dimmyvi",
          "authorAssociation": "OWNER",
          "body": "Action has succeeded now",
          "createdAt": "2023-01-10T19:08:46Z",
          "updatedAt": "2023-01-10T19:08:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOIGmWw85KE-zD",
          "commit": {
            "abbreviatedOid": "8243bdd"
          },
          "author": "dimmyvi",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-10T19:12:16Z",
          "updatedAt": "2023-01-10T19:12:16Z",
          "comments": []
        }
      ]
    }
  ]
}